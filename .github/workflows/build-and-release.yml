name: Build and Release

on:
  release:
    types: [published, created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build for'
        required: true
        default: 'v1.2.1'

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly used for CLI tools
          - goos: windows
            goarch: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="gh-wizard"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o "${BINARY_NAME}"
          
          # Create archive
          ARCHIVE_NAME="gh-wizard-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            ARCHIVE_NAME="${ARCHIVE_NAME}.zip"
            zip "${ARCHIVE_NAME}" "${BINARY_NAME}"
          else
            ARCHIVE_NAME="${ARCHIVE_NAME}.tar.gz"
            tar czf "${ARCHIVE_NAME}" "${BINARY_NAME}"
          fi
          
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ env.ARCHIVE_NAME }}

      - name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.version.outputs.VERSION }} ${{ env.ARCHIVE_NAME }}

  # Create SHA256 checksums
  checksums:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ steps.version.outputs.VERSION }} --pattern "*.tar.gz" --pattern "*.zip"

      - name: Generate checksums
        run: |
          sha256sum *.tar.gz *.zip > SHA256SUMS
          
      - name: Upload checksums
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.version.outputs.VERSION }} SHA256SUMS